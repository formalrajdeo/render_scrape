const express = require('express');
const fs = require('fs');
const path = require('path');
const axios = require('axios');
const archiver = require('archiver');
const puppeteer = require('puppeteer');
const pLimit = require('p-limit');

const app = express();
const PORT = process.env.PORT || 3000;

const scrapedDir = path.join(__dirname, 'scraped');
if (!fs.existsSync(scrapedDir)) fs.mkdirSync(scrapedDir);

const groupIds = [4590793,4590835,4593315,4593409,4593475,4593493,4593515,4593533,4593535,4593573,4593605,4593645,4593649,4593653,4593757,4593813,4593849,4593869,4593909,4593929,4593941,4593943,4593949,4593975,4593987,4594009,4594027,4594035,4594077,4594089,4594137,4594171,4594213,4594233,4594307,4594313,4594327,4594401,4594415,4594443,4594447,4594451,4594461,4594539,4594581,4594595,4594627,4594663,4594665,4594677,4594701,4594739,4594763,459478,4594929,4594941,4594947,4594963,4594973,4594987,4595025,4595029,4595057,4595141,4595183,4595261,4595267,4595321,4595441,4595449,4595457,4595479,4595551,4595559,4595577,4595589,4595609,4595655,4595699,4595791,4595845,4595849,4595851,4595855,4595879,4595889,4595951,4595971,4596063,459704,460140,4603943,4603991,4604003,4604025,4604037,4604079,4604133,4604153,4604179,4604191,4604221,4604295,4604329,4604351,4604395,4604419,4604437,4604469,4604475,4604507,4604597,4604639,4604751,4604773,4604817,4604851,4604915,4604935,4604955,4605075,4605079,4605131,4605167,4605195,4605223,4605247,4605349,4605353,4605377,4605453,4605503,4605627,4605649,4605659,4605681,4605697,4605709,4605719,4605851,4605913,4605933,4605951,4605961,4606021,4606023,4606033,4606053,4606081,4606161,4606163,4606175,460618,4606203,4606215,4606255,4606259,4606363,4606445,4606453,4606477,4606631,4606647,4606657,4606821,4606831,4606839,4606859,4606885,4606961,4606963,4606983,4607089,4607101,4607103,4607179,4607237,4607345,4607349,460878,4609691,4609711,4609847,4609909,4609917,4609935,4609953,4609957,4610051,4610211,4610215,4610219,4610227,4610259,4610265,4610313,4610357,4610381,4610397,4610425,4610475,4610557,4610561,4610717,4610729,4610733,4610737,4610771,4610855,4610857,4610937,4610999,4611017,4611049,4611055,4611071,4611097,4611099,4611103,4611111,4611121,4611137,4611229,4611255,461126,4611357,4611385,4611403,4611417,4611479,4611495,4611515,4622007,4622075,4622077,4622079,4622091,4622123,4622153,4622179,4622235,4622241,4622291,4622293,4622311,4622321,4622367,4622381,4622421,4622485,4622505,4622543,4622557,4622587,4622589,4622601,4622643,4622661,4622697,4622701,4622725,4622813,4622821,4622851,4622857,4622859,4622887,4622899,4623021,4623057,4623197,4623237,4623263,4623361,4623393,4623405,4623437,4623481,4623557,4623611,4623627,4623681,4623693,4626081,4626213,4626217,4626247,4626279,4626299,4626303,4626383,4626469,4626565,4626603,4626645,4626679,4626701,4626725,4626731,4626869,4626891,4626903,4626911,4627067,4627089,4627169,4627227,4627409,4627457,4627511,4627555,4627571,4627611,4627645,4627693,4627763,4627837,4627841,4627861,4627867,4627911,4627945,4628013,4628031,4628041,4628067,4628071,4628211,4628227,4628235,4628247,4628253,4628255,4628275,4628321,4628337,4628457,4628515,4628563,4628571,4628597,4628647,4628661,4628687,4628697,4628777,4628819,4628861,4636677,4636683,4636705,4636785,4636817,4636829,4636857,4636933,4636979,4637107,4637143,4637145,4637197,4637217,4637249,4637257,4637299,4637341,4637345,4637369,4637411,4637427,4637469,4637505,4637625,4637669,4637687,4637689,4637691,4637725,4637753,4637765,4637833,4637835,4637843,4637845,4637853,4637873,4637881,4637899,4637905,4637933,4637951,4637981,4637985,4638019,4638055,4638057,4638109,4638137,4638177,4638187,4638221,4638225,4638251,4638285,4638289,4638337,4638377,4638429,4638449,4638487,4638491,4638499,4638529,4638557,4638595,4638621,4638651,4638653,4638655,4638671,4638689,4638699,4638701,4638713,4638727,4638773,4638821,4638831,4638839,4638843,4638851,4638883,4638921,4638961,4638963,4638979,4638981,4638985,4639003,4639067,4639075,4639107,4639109,4639163,4639169,4639189,4639299,4639301,4639329,4639339,4639363,4639447,4639471,4639531,4639539,4639565,4639569,4639583,4639603,4639649,4639665,4639727,4639733,4639741,4639779,4639781,4639793,4639859,4639885,4639931,4639935,4639953,4639967,4640013,4640015,4640029,4640037,4640079,4640089,4640113,4642433,4642453,4642471,4642477,4642709,4642751,4642805,4642933,4642991,4643097,4643165,4643193,4644830,4644838,464662,465044,4653200,4653430,4653984,4654342,4655729,4655735,4655739,4655745,4655747,4655757,4655761,4655767,4655781,4655801,4655807,4655831,4655837,4655903,4655913,4655931,4655935,4655937,4655941,4655949,4655983,4655985,4656011,4656015,4656041,4656043,4656067,4656091,4656107,4656123,4656155,4656159,4656171,4656173,4656177,4656181,4656199,4656203,4656219,4656221,4656225,4656237,4656239,4656245,4656263,4656277,4656279,4656289,4656301,4656303,4656329,4656339,4656341,4656343,4656351,4656361,4656383,4656401,4656411,4656449,4656451,4656455,4656459,4656473,4656475,4656477,4656481,4656491,4656505,465774,4658937,4658953,4658963,4659013,4659161,4659163,4659207,4659221,4659271,4659291,4659293,4659301,4659317,4659497,4659589,4659599,4659621,4659677,4659697,4659715,4659721,4659753,4659765,4659781,4659801,4659817,4659827,4659867,4659869,4659873,4659895,4659917,4659955,4659957,4659981,4660015,4660097,4660147,4660215,4660237,4660249,4660383,4660469,4660489,4660545,4660551,4660597,4660637,4660789,4660807,4661037,4661043,4661047,4661077,4661139,4661177,466118,4661195,4661201,4661239,4661267,4661335,4661347,4661359,4661417,4661443,4661631,4669465,4669659,4669739,4669755,4669791,4670039,4670041,4670047,4670101,4670343,4670381,4670471,4670525,4670637,4670709,4670755,467092,4671009,4671097,4671261,4671431,4671551,4671759,4671953,467200,4672005,4672069,4672151,4672185,4672223,4672331,4672689,4675389,4675483,4675985,4676167,4676219,4676301,4676309,4676365,4676391,4676665,4676793,4676833,4676921,4676995,4677011,4677055,4677077,4677159,4677171,4677547,4677785,4677837,4677923,4677945,4685843,4686081,4686343,4686369,4686673,4687033,4687143,4687635,4687693,4688021,4688131,4689003,4691811,4691871,4692095,4692271,4692357,4692379,4692657,4692815,4692967,4693073,4693245,4693643,4693645,4693999,4702239,4702275,4702831,4702913,4702979,4703051,4703079,4703257,4703527,4703591,4704761,4705019,4705127,4705437,4708335,4708447,4709055,4709615,4709733,4710335,4718731,4718983,4719177,4719261,4719483,4719567,4719711,4719865,4719905,4720663,4720787,4721763,4721833,4725223,4725819,4726631,4726951,4726957,4727001,4727035,4735859,4736279,4736997,4737083,4737139,4737797,4738145,4741175,4741559,4742707,4743155,4751937,4752749,475294,4753195,475374,4753885,4753975,475662,475664,4758259,476528,476692,4767909,476812,4768527,4769105,4769561,4770111,4770263,4770575,4770599,4770811,477388,477426,4774381,4774435,4774647,4774715,4774953,4774955,4775103,477538,477558,4790049,4791453,4791483,4791853,4792317,4800987,4802329,4803203,4806613,4807389,4807989,481178,481500,481626,481634,4817773,481822,4818519,4818807,481918,4820227,4823235,4824823,4825135,482628,4833855,4833903,4834961,4835157,4836245,4836369,4836631,4839257,4839595,4840795,4851639,4851841,4851933,4852829,4855759,4856429,4856573,4858137,4868815,4868861,4869203,4873765,4882593,4884053,4884727,4884919,4884937,4884955,4889223,4890837,4898955,4899325,4899477,4901247,4901533,4902267,4905279,4905713,4906535,4906845,4915265,4916665,4916925,4918181,4921713,492296,49230,4923595,4923713,4923751,492740,4933927,4935007,494662,4949782,4970630,498188,498434,498438,4988946,4989268,49900,499788,49980,499912,5004986,5019922,5021058,50700,5082190,508530,5085318,508906,508920,508922,509216,509622,50968,5101868,51062,511284,51130,5146952,514742,515196,51520,5152294,515292,515340,51540,515416,515922,515946,5161434,516156,516286,5163862,51716,51726,51940,5195006,5195644,5196074,52006,5201478,5201868,5212018,52222,524288,524458,524692,5249990,5251246,525752,526200,5265368,526792,527004,527166,527232,527290,5277722,5283794,530794,530806,530892,530898,530956,530968,530980,531034,531132,531770,531974,532184,532522,532864,5343434,5360926,5363352,540686,541914,541922,542358,542480,542916,543142,543180,544016,5462642,546512,547298,547398,548100,548350,5491006,5496710,5522960,55292,5529952,5538398,5538496,55426,55610,55614,5561704,55718,557410,557570,558162,559360,56130,5621646,564142,564396,564658,564930,565454,565512,56674,56686,56696,56876,56918,5703200,57238,5725622,574650,57472,57534,575506,576254,576504,57716,579960,579968,579998,580170,580938,580950,581384,581618,5818326,5819266,5823524,5856222,5867122,5867328,5884508,5888262,5888320,5898424,589866,589992,590268,590734,591074,591654,591760,592762,592970,593168,5937226,5942,5947482,597294,597394,597990,5982928,5997790,5998690,5998956,6002744,6003726,6013316,6015169,6015961,6019415,6032,6036711,6037289,6047303,6051993,6062979,6068,606840,606992,607792,607850,6086213,609406,6102877,6104,6114527,612158,612622,613206,614110,614294,6144067,614548,6146417,6167403,6167961,6182979,6183537,6183885,6184005,6201521,6217537,6226,6226227,622668,622740,6228489,6228723,6229049,6243685,624924,626014,6260753,6266343,6267201,6281431,6283311,628610,629258,629314,629350,629612,629772,629852,6298611,630400,630482,630632,630652,630738,630936,631042,6315839,6343523,6357149,6358857,6363169,6363734,6363784,6364341,6373915,6373921,6373931,6373959,6374013,6375723,6376339,6379949,640044,640060,6402,640816,641082,641374,641440,6414509,6441017,6445287,6445341,6445375,6446633,6447229,644858,645086,645442,645478,645628,6456307,6456629,645696,6456999,645700,645958,646728,647144,6471981,6472047,6472137,6473043,6506251,6521907,6542981,6543107,6543109,6543123,6543157,6543165,6543177,6543191,6543255,6543971,655478,65648,656690,656904,656918,656956,657270,6572729,657646,6578659,658060,658378,658538,658668,66028,6602867,66128,661716,66176,662356,662392,662466,663052,663508,6642061,6642221,66518,66658,66952,67060,6708465,67090,672404,672996,673390,67356,674070,674076,674232,674582,674744,674876,675066,67548,6755969,6755987,6756015,6756019,6756119,6756141,6756259,6756275,6756287,6756291,6756359,6756379,6756387,6756419,6756447,6756493,6756507,6756523,6756541,6756561,6756565,6756583,6756601,6756629,6756641,6756643,6756651,6756661,6756693,6756761,6756811,6756835,6756905,6756965,6756981,6756997,6757017,6757061,6757067,6757075,6757135,6757155,6757233,6757265,6757267,6757285,6757305,6757331,6757357,6757405,6757409,6757429,6757431,6757441,6757453,6757459,6757481,6757493,6757553,6757571,6757589,6757627,6757633,6757639,6757641,6757645,6757651,6757667,6757669,6757677,6757681,6757883,6757957,6758051,6758303,6758325,6758421,6758555,6758573,6758585,6758725,67718,678244,679286,679516,679762,680024,6821851,68256,68282,68300,6832773,68476,68512,6851843,6851887,6854773,6867421,688202,6887263,6888,688868,688882,68924,68950,6898489,6898765,6898891,6905879,690960,6948949,694984,695164,695922,696200,696248,696440,6969263,7035749,7046371,704764,705036,705428,7068045,706874,707036,7100845,7100903,7101599,710790,711782,712158,712320,712422,7126,712684,7150248,7160160,7160776,7161778,7162376,7170,71836,71880,7199201,721588,721702,722100,722108,72252,722734,7227829,7227837,7227839,7227877,7228105,7228129,7228145,7228231,7228261,7231843,724108,72470,7260809,72692,727184,7314067,738824,739188,739200,739282,739318,739454,7395615,7395891,739882,740434,740590,740642,74082,7422517,743108,744270,7450,745036,745748,7460909,7471395,7510537,7510589,7510633,7526911,7527711,7527777,755618,756028,756868,7575585,7576623,759820,760178,760234,7604293,7604365,760686,760982,761428,761998,7640,7654423,7657094,7674433,7698,7700,7708051,770844,7708769,771482,771686,7717337,7717423,772402,7724783,772732,7740739,7742,776126,776324,776336,776666,776718,776998,777494,778110,778182,778206,7788525,7788761,7789407,7790181,7790201,7790301,7790307,7790341,7799739,7833395,7834223,7848567,7848803,787346,787392,787524,7876,788,7883101,7888,789430,789532,7930001,7930361,8001529,8006,8028649,8029155,8040,8116485,8116713,8133689,8159505,8160083,8165489,8165687,8165697,8165775,8165889,8165913,8167199,8197957,8199599,82242,82278,82426,8268,8273973,8274521,8275651,8277165,82802,82838,8312653,8312791,8313081,8313155,8313257,8313783,8313913,8313997,8314003,8314143,8314259,8314447,8314601,8314625,8314627,8314841,8314911,8314959,8315109,8315205,83500,8356727,8364,8373937,8375057,8380169,83868,83902,8412219,8416,8441269,84498,8494235,8542,8554,8555201,8586,8604839,8619571,8641691,8642143,8642721,8642781,8642821,8642999,8643053,8658779,869292,869844,869886,870384,8765549,8771401,88002,88030,8822618,88312,884742,88524,885336,886352,887190,887302,8882741,8883385,8921111,89688,8970163,89716,89946,9013163,9013621,9013697,9013769,901690,902122,902178,90224,902524,903038,903122,903514,9066387,9079891,9096333,9109821,9145137,9182099,918690,919640,919670,920278,9210581,9224945,923798,925074,926026,934868,935510,936444,936896,9396285,9406421,941566,944,9443581,951890,952808,953348,9542353,956712,9569449,957020,957140,957590,957872,9617981,966760,967844,968028,968204,968758,968830,969560,969954,9699763,9724361,972510,973180,9767716,9788054,983706,9854688,9881598,98898,991006,9947224,9963012]

// Helper to chunk array
function chunkArray(arr, size) {
    const result = [];
    for (let i = 0; i < arr.length; i += size) {
        result.push(arr.slice(i, i + size));
    }
    return result;
}

async function getNaukriCookiesAndHeaders() {
    const browser = await puppeteer.launch({
        headless: true,
        args: ['--no-sandbox']
    });
    const page = await browser.newPage();
    await page.goto('https://www.naukri.com', { waitUntil: 'networkidle2' });
    const cookies = await page.browserContext().cookies();
    await browser.close();

    const cookieHeader = cookies.map(c => `${c.name}=${c.value}`).join('; ');
    return {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',
        'accept': 'application/json',
        'accept-language': 'en-US,en;q=0.9',
        'appid': 109,
        'content-type': 'application/json',
        'gid': 'LOCATION,INDUSTRY,EDUCATION,FAREA_ROLE',
        'priority': 'u=1, i',
        'systemid': 109,
        'Cookie': cookieHeader
    };
}

async function scrapeGroupId(groupId, headers) {
    try {
        const url = `https://www.naukri.com/companyapi/v1/company-group-data/desktop/${groupId}`;

        const response = await axios.get(url, { headers });
        // const response = { data: { groupId } }; // for mocking
        const filePath = path.join(scrapedDir, `${groupId}.json`);
        fs.writeFileSync(filePath, JSON.stringify(response.data, null, 2));
        console.log(`✅ Saved ${filePath}`);
        return { groupId, success: true };
    } catch (error) {
        console.error(`❌ Failed scraping ${groupId}:`, error.message);
        return { groupId, success: false, error: error.message };
    }
}

app.get('/scrape', async (req, res) => {
    // Get fresh headers/cookies for this major group
    const headers = await getNaukriCookiesAndHeaders();

    // Batch into 9 major groups (1000 groupIds each)
    const majorGroups = chunkArray(groupIds, 1000);

    const limit = pLimit(10); // limit concurrency of axios requests

    console.log(`🚀 Starting scraping for ${groupIds.length} groupIds in ${majorGroups.length} major groups`);

    for (let majorIndex = 0; majorIndex < majorGroups.length; majorIndex++) {
        const majorGroup = majorGroups[majorIndex];
        console.log(`\n➡️ Processing major group ${majorIndex + 1} / ${majorGroups.length}`);


        // Now chunk major group into subgroups of 100 groupIds each
        const subGroups = chunkArray(majorGroup, 100);

        for (let subIndex = 0; subIndex < subGroups.length; subIndex++) {
            const subGroup = subGroups[subIndex];
            console.log(`  🔹 Scraping subgroup ${subIndex + 1} / ${subGroups.length} (size: ${subGroup.length})`);

            // Run all requests in this subgroup in parallel but with concurrency limit
            const promises = subGroup.map(groupId =>
                limit(() => scrapeGroupId(groupId, headers))
            );

            const results = await Promise.all(promises);

            const successCount = results.filter(r => r.success).length;
            const failCount = results.length - successCount;

            console.log(`  ✅ Subgroup done. Success: ${successCount}, Fail: ${failCount}`);
        }
    }

    console.log(`\n🎉 All scraping done!`);

    res.send(`
    ✅ All scraping done!<br>
    <a href="/">⬅️ Go back</a><br>
    <a href="/download-all">📦 Download All JSON Files</a>
  `);
});

// Zip download endpoint (same as yours)
app.get('/download-all', (req, res) => {
    const archive = archiver('zip', { zlib: { level: 9 } });
    res.setHeader('Content-Disposition', 'attachment; filename="naukri-jsons.zip"');
    res.setHeader('Content-Type', 'application/zip');
    archive.pipe(res);
    archive.directory(scrapedDir, false);
    archive.finalize();
});

// Home page
app.get('/', (req, res) => {
    res.send(`
    <h2>🧠 Naukri Scraper</h2>
    <p><a href="/scrape">▶️ Run Scraper</a></p>
    <p><a href="/download-all">📥 Download All JSONs (ZIP)</a></p>
    <p>Once scraped, you can also access individual files like: <code>/4632583.json</code></p>
  `);
});

app.listen(PORT, () => {
    console.log(`🚀 Server running at http://localhost:${PORT}`);
});
